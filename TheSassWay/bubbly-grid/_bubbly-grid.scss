

// **********
// BUBBLY GRID SYSTEM
// **********


/* Sym grid (symmetrical only)
–––––––––––––––––––––––––––––––––––––––––––––––––– */

/*

- the 'clearing' variable is used to make sure that
  every column clears at the end of each cycle (e.g., if col = 4, it's gonna clear every 4th item)

- width = 99.99% because otherwise the layout breaks in IE...

*/

@mixin sym-grid($col: 1, $gutter: 10px, $stretch: false) {
  float: left;
  $clearing : $col + 1;
  width: calc(99.99% * 1/#{$col} - (#{$gutter} - #{$gutter} * 1/#{$col}));
  margin-right: $gutter;
  &:nth-of-type(n) {
    margin-right: $gutter;
    clear: none;
  }
  &:nth-of-type(#{$col}n+#{$col}) {
    margin-right: 0;
  }
  &:nth-of-type(#{$col}n+#{$clearing}) {
    clear: left;
  }

  @if $stretch == true {
    @for $i from 2 through $col {
      $remainingCols : ($col - $i) + 1;
      &:nth-of-type(#{$col}n+#{$i}):last-of-type {
        width: calc(99.99% * #{$remainingCols}/#{$col} - (#{$gutter} - #{$gutter} * #{$remainingCols}/#{$col}));
        margin-right: 0;
      }
      &:nth-of-type(#{$col}n+#{$clearing}):last-of-type {
        width: 100%;
        margin-right: 0;
      }
    }
  }
  @else if $stretch == reset {
    @for $i from 2 through $col {
      $remainingCols : ($col - $i) + 1;
      &:nth-of-type(#{$col}n+#{$i}):last-of-type {
        width: calc(99.99% * 1/#{$col} - (#{$gutter} - #{$gutter} * 1/#{$col}));
        margin-right: 0;
      }
      &:nth-of-type(#{$col}n+#{$clearing}):last-of-type {
        width: calc(99.99% * 1/#{$col} - (#{$gutter} - #{$gutter} * 1/#{$col}));
      }
    }
  }
}


/* Asym grid (asymmetrical)
–––––––––––––––––––––––––––––––––––––––––––––––––– */

/* The transformRatio function is here thanks to IE...which doesn't handle properly the raw ratios we pass within the @mixin asym-grid($col, $push...) */
@function transformRatio($ratio) {
  $newRatio: $ratio * 100;
  @return $newRatio;
}


@mixin asym-grid($col: 1/1, $gutter: 0px, $last: false, $push: false, $pull: false, $full: false) {
  $newCol: call(transformRatio, $col); // coz of IE...
  float: left;
  margin-right: $gutter;
  width: calc(99.99% * (#{$newCol}/100) - (#{$gutter} - #{$gutter} * (#{$newCol}/100)));

  @if $last == true {
    float: right;
    margin-right: 0;
    + * {
      clear: both;
    }
  }
  @if $last == reset {
    + * {
      clear: none;
    }
  }

  @if $push != false and $push != reset {
    $newPush: call(transformRatio, $push);
    position: relative;
    left: calc(99.99% * (#{$newPush}/100) + (#{$gutter} + #{$gutter} * (#{$newPush}/100)) - #{$gutter});
  }
  @if $push == reset {
    position: static;
  }

  @if $pull != false and $pull != reset {
    $newPull: call(transformRatio, $pull);
    position: relative;
    right: calc(99.99% * (#{$newPull}/100) + (#{$gutter} + #{$gutter} * (#{$newPull})/100) - #{$gutter});
  }
  @if $pull == reset {
    position: static;
  }

  @if $full == true {
    position: static;
    width: 100%;
    margin-right: 0;
  }
}


/* Nesting
–––––––––––––––––––––––––––––––––––––––––––––––––– */

// When you want to nest multiples symmetrical grids, ex :
// .container {
//   .first-lvl item {
//     @include sym-grid(4, 20px);
//   }
//
//   .second-lvl {
//   @include nest();
//   }
//
//   .second-lvl item {
//     @include sym-grid(2, 10px);
//   }
// }

@mixin nest($float: left) {
  float: $float;
  width: 100%;
}


/* Centering
–––––––––––––––––––––––––––––––––––––––––––––––––– */

/* When you want to center a col */
@mixin asym-center() {
  float: none;
  margin-right: auto;
  margin-left: auto;

}
